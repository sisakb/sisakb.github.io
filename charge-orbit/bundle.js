(()=>{"use strict";const t=(t,e,s=1)=>Array(Math.ceil((e-t)/s)).fill(t).map(((t,e)=>t+e*s));class e{draw(t){alert("Draw method not implemented")}}class s{constructor(t,e){this.x=t,this.y=e}draw(t){this.toCanvasPoint(t).draw(t)}toCanvasPoint(t){return new a((this.x+t.halfSize)*t.scale,-t.scale*(this.y-t.halfSize))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}}class a extends e{constructor(t,e){super(),this.x=t,this.y=e}draw(t){t.ctx.beginPath(),t.ctx.arc(this.x,this.y,2,0,2*Math.PI,!0),t.ctx.stroke()}}class i extends e{constructor(t,e,s,a="black",i="",n=""){super(),this.p=t,this._x=e,this._y=s,this.color=a,this.label=i,this.unit=n,this.calcLength()}static fromTo(t,e,s,a="black",n="",h=""){let c=e.x-t.x,r=e.y-t.y,o=s/Math.sqrt(Math.pow(c,2)+Math.pow(r,2));return new i(t,c*o,r*o,a,n,h)}get x(){return this._x}get y(){return this._y}set x(t){this._x=t,this.calcLength()}set y(t){this._y=t,this.calcLength()}calcLength(){this.length=Math.sqrt(Math.pow(this._x,2)+Math.pow(this._y,2))}draw(t){t.ctx.beginPath(),t.ctx.moveTo(this.p.toCanvasPoint(t).x,this.p.toCanvasPoint(t).y),t.ctx.lineTo(this.p.toCanvasPoint(t).x+this.x*t.scale,this.p.toCanvasPoint(t).y-this.y*t.scale),t.ctx.strokeStyle=this.color,t.ctx.stroke(),t.ctx.save(),t.ctx.translate(this.p.toCanvasPoint(t).x+this.x*t.scale,this.p.toCanvasPoint(t).y-this.y*t.scale);let e=Math.atan2(-this.y,this.x);t.ctx.rotate(e),t.ctx.moveTo(0,0),t.ctx.lineTo(-10*t.scale,-6*t.scale),t.ctx.stroke(),t.ctx.moveTo(0,0),t.ctx.lineTo(-10*t.scale,6*t.scale),t.ctx.stroke(),t.ctx.translate(20,20),t.ctx.rotate(-e),t.ctx.font="20px CMU Serif Bold",t.ctx.fillStyle=this.color,t.ctx.fillText(`${this.label}${this.label?" = ":""}${String(Math.round(this.length))} ${this.unit}`,0,0),t.ctx.restore()}}class n extends e{constructor(t,e,s=null){super(),this.p=t,this.r=e,this.label=s}draw(t){t.ctx.strokeStyle="black",t.ctx.beginPath(),t.ctx.arc(this.p.toCanvasPoint(t).x,this.p.toCanvasPoint(t).y,this.r*t.scale,0,2*Math.PI,!1),t.ctx.fillStyle="gray",t.ctx.fill(),this.label&&(t.ctx.font="20px CMU Serif",t.ctx.fillStyle="white"),t.ctx.stroke()}}class h extends e{constructor(t,e,s="black"){super(),this.p1=t,this.p2=e,this.color=s}draw(t){t.ctx.strokeStyle=this.color,this.p1.draw(t),this.p2.draw(t),t.ctx.moveTo(this.p1.toCanvasPoint(t).x,this.p1.toCanvasPoint(t).y),t.ctx.lineTo(this.p2.toCanvasPoint(t).x,this.p2.toCanvasPoint(t).y),t.ctx.stroke()}}class c extends e{constructor(t=100){super(),this.maxLength=t,this.trace=[]}push(t){this.trace.length==this.maxLength&&this.trace.shift(),this.trace.push(t)}draw(t){t.ctx.beginPath(),this.trace.map((e=>{t.ctx.lineTo(e.toCanvasPoint(t).x,e.toCanvasPoint(t).y),t.ctx.stroke()}))}points(){return this.trace.map((t=>({x:t.x,y:t.y})))}}let r=!1;const o=898e7;let l=.02,x=.7,d=225,w=200,p=new class{constructor(t,e,s=1){this.id=t,this.size=e,this.scale=s;const a=document.getElementById(t);this.context=a.getContext("2d")}get ctx(){return this.context}get halfSize(){return this.size/2/this.scale}drawCartesian(e,a){let i="rgba(0, 0, 0, 0.2)";t(-this.halfSize,this.halfSize+e,e/this.scale).map((t=>{new h(new s(t,-this.halfSize),new s(t,this.halfSize),i).draw(this)})),t(-this.halfSize,this.halfSize+a,a/this.scale).map((t=>{new h(new s(-this.halfSize,t),new s(this.halfSize,t),i).draw(this)})),new h(new s(-this.halfSize,0),new s(this.halfSize,0)).draw(this),new h(new s(0,-this.halfSize),new s(0,this.halfSize)).draw(this)}draw(t){t.draw(this)}clear(){this.ctx.clearRect(0,0,this.size,this.size)}}("canvas",800,1),u=new n(new s(w,0),20,"+Q"),m=new n(new s(0,0),20,"−Q"),y=new i(u.p,0,0,"blue","a","m/s²"),g=new i(u.p,0,d,"red","v","m/s"),v=new c(500),f=0,S=()=>{u=new n(new s(w,0),20,"+Q"),m=new n(new s(0,0),20,"−Q"),g=new i(u.p,0,d,"red","v","m/s"),v=new c(500),f=0,r||M()},M=()=>{let t=.01,e=s.distance(u.p,m.p),a=o*Math.pow(l,2)/Math.pow(e,2),n=i.fromTo(u.p,m.p,a,"green","F","N");y=i.fromTo(u.p,m.p,n.length/x,"brown","a","m/s²"),r&&(g.x+=y.x*t,g.y+=y.y*t,u.p.x+=g.x*t,u.p.y+=g.y*t,f%2==0&&v.push(new s(u.p.x,u.p.y))),p.clear(),p.drawCartesian(50,50),p.draw(v),p.draw(g),p.draw(y),p.draw(n),p.draw(m),p.draw(u);let h=.5*x*Math.pow(g.length,2),c=o*l*-l/e;document.getElementById("em").innerHTML=String(h.toFixed(2)),document.getElementById("ep").innerHTML=String(c.toFixed(2)),document.getElementById("sume").innerHTML=String((h+c).toFixed(2)),e>20&&r&&requestAnimationFrame(M),f++};M(),document.getElementById("start").onclick=t=>{r=!0,requestAnimationFrame(M)},document.getElementById("stop").onclick=t=>{r=!1},document.getElementById("reset").onclick=t=>{S(),r||M()},document.getElementById("scale").oninput=t=>{let e=Number(t.target.value);p.scale=e,r||M()},document.getElementById("Q").oninput=t=>{l=Number(t.target.value),r||M()},document.getElementById("m").oninput=t=>{x=Number(t.target.value),r||M()},document.getElementById("v0").oninput=t=>{d=Number(t.target.value),r||S()},document.getElementById("x0").oninput=t=>{w=Number(t.target.value),r||S()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,